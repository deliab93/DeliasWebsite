@inherits UmbracoViewPage
@{
    var site = Model.Root() as Home;
    var children = site?.Children.Where(x => x.IsVisible()).ToList();
    var contactPage = site?.Children.FirstOrDefault(x => x.Name.Contains("Contact"));
}
<header class="navbar transparent">

    <div class="container navbar-content">
        <a href="@site?.Url()" aria-label="home" class="logo">
            <span class="highlight">Delias</span>Portfolio
        </a>

        <div class="nav-desktop">
        @if (children?.Count > 0 && children != null)
        {          
                <nav class="nav-links">
                    @foreach (var childPage in children)
                    {
                        var hideFromNav = childPage.Value<bool>("hideFromNavigation") || childPage.ContentType.Alias.InvariantEquals("contactSubmissionsFolder") || childPage.ContentType.Alias.InvariantEquals("search");
                        if (childPage.IsPublished() && !hideFromNav)
                        {
                            <a href="@childPage.Url()" aria-label="@childPage.Name">@childPage.Name</a>
                        }                     
                    }
                </nav>              
        }
            <button class="theme-toggle" aria-label="Toggle theme">
                <svg class="icon-sun" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"
                     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="4"></circle>
                    <path d="M12 2v2"></path>
                    <path d="M12 20v2"></path>
                    <path d="m4.93 4.93 1.41 1.41"></path>
                    <path d="m17.66 17.66 1.41 1.41"></path>
                    <path d="M2 12h2"></path>
                    <path d="M20 12h2"></path>
                    <path d="m6.34 17.66-1.41 1.41"></path>
                    <path d="m19.07 4.93-1.41 1.41"></path>
                </svg>

                <svg class="icon-moon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"
                     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
                </svg>
            </button>


            @await Html.PartialAsync("_Search")

            <a href="@site?.HireMeUrl?.Url" class="btn btn-primary">Hire Me</a>
         </div>




        <div class="nav-mobile">
            <button class="theme-toggle" aria-label="Toggle theme">
                <svg class="icon-sun" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"
                     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="4"></circle> <path d="M12 2v2"></path><path d="M12 20v2"></path><path d="m4.93 4.93 1.41 1.41"></path>
                    <path d="m17.66 17.66 1.41 1.41"></path><path d="M2 12h2"></path><path d="M20 12h2"></path><path d="m6.34 17.66-1.41 1.41"></path>
                    <path d="m19.07 4.93-1.41 1.41"></path>
                </svg>

                <svg class="icon-moon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"
                     fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
                </svg>
            </button>


            <button id="menuOpen" class="menu-toggle" aria-label="Open menu">
                <span class="menu-icon" style="display: inline;">☰</span>
            </button>
        </div>
    </div>


    <div class="mobile-menu" id="mobileMenu">
        <button id="menuClose" class="menu-toggle" aria-label="Close menu">
            <span class="close-icon" style="display: inline;">✖</span>
        </button>
        @if (children?.Count > 0 && children != null)
        {
            <nav class="mobile-nav-links">
                @foreach (var childPage in children)
                {
                    var hideFromNav = childPage.Value<bool>("hideFromNavigation") || childPage.ContentType.Alias.InvariantEquals("contactSubmissionsFolder") || childPage.ContentType.Alias.InvariantEquals("search");
                    if (childPage.IsPublished() && !hideFromNav)
                    {
                        <a href="@childPage.Url()" aria-label="@childPage.Name">@childPage.Name</a>
                    }
                  
                }
            </nav>
            
        }
        @await Html.PartialAsync("_Search")
        <a href="@site?.HireMeUrl?.Url" aria-label="hire me" class="btn btn-primary">Hire Me</a>
    </div>
</header>


<script>
document.addEventListener('DOMContentLoaded', function () {
  const openBtn = document.getElementById('menuOpen');
  const closeBtn = document.getElementById('menuClose');
  const mobileMenu = document.getElementById('mobileMenu');

  openBtn.addEventListener('click', () => {
    mobileMenu.classList.add('open');
    openBtn.style.display = 'none'; // Hide ☰
    document.body.style.overflow = 'hidden';
  });

  closeBtn.addEventListener('click', () => {
    mobileMenu.classList.remove('open');
    openBtn.style.display = 'inline-block'; // Show ☰
    document.body.style.overflow = '';
  });
});

</script>

@* <script>
    document.addEventListener('DOMContentLoaded', function () {
        const menuToggle = document.getElementById('menuToggle');
        const mobileMenu = document.getElementById('mobileMenu');
        const menuIcon = menuToggle?.querySelector('.menu-icon');
        const closeIcon = menuToggle?.querySelector('.close-icon');
        const navbar = document.querySelector('.navbar');

        let isMenuOpen = false;
        let originalWasScrolled = false;

        if (!menuToggle || !mobileMenu || !menuIcon || !closeIcon || !navbar) {
            console.warn("Menu elements not found. JS may not work.");
            return;
        }

        menuToggle.addEventListener('click', () => {
            isMenuOpen = !isMenuOpen;

            if (isMenuOpen) {
            //     originalWasScrolled = navbar.classList.contains('scrolled');
            //     if (originalWasScrolled) {
            //         navbar.classList.remove('scrolled');
            //         navbar.classList.add('transparent');
            //           mobileMenu.classList.add('open');
            // menuIcon.style.display = 'none';
            // closeIcon.style.display = 'inline';
            // document.body.style.overflow = 'hidden';
                   
                // } else {
                     mobileMenu.classList.add('open');
            menuIcon.style.display = 'none';
            closeIcon.style.display = 'inline';
                //}
            } else {
                 mobileMenu.classList.remove('open');
            menuIcon.style.display = 'inline';
            closeIcon.style.display = 'none';

            // if (originalWasScrolled) {
            //     navbar.classList.add('scrolled');
            // }
            // navbar.classList.remove('transparent');

            document.querySelectorAll('.search-toggle-form.active').forEach(form => {
                form.classList.remove('active');
            });
            }
        });

        function openMenu() {
            mobileMenu.classList.add('open');
            menuIcon.style.display = 'none';
            closeIcon.style.display = 'inline';
            document.body.style.overflow = 'hidden';
        }

        function closeMenu() {
            mobileMenu.classList.remove('open');
            menuIcon.style.display = 'inline';
            closeIcon.style.display = 'none';
            document.body.style.overflow = '';

            if (originalWasScrolled) {
                navbar.classList.add('scrolled');
            }
            navbar.classList.remove('transparent');

            document.querySelectorAll('.search-toggle-form.active').forEach(form => {
                form.classList.remove('active');
            });
        }
    });
</script>
 *@

<script>
document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".search-toggle-form").forEach(formWrapper => {
        const toggleButton = formWrapper.querySelector(".search-toggle-icon");
        const input = formWrapper.querySelector(".search-toggle-input");

        toggleButton?.addEventListener("click", () => {
            formWrapper.classList.toggle("active");
            if (formWrapper.classList.contains("active")) {
                input?.focus();
            }
        });

        formWrapper.querySelector("form")?.addEventListener("submit", () => {
            formWrapper.classList.remove("active");
        });
    });
});
</script>


